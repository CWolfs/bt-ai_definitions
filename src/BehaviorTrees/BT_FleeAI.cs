//
// DO NOT MODIFY THIS FILE.
//
// This file is automatically generated using the behavior_tree_translator.py script
// on the file: ../../Assets/Behavior Tree Definitions\bt_flee_ai.xml
//

using BattleTech;


public static class FleeAI_BT
{
    public static BehaviorNode InitRootNode(BehaviorTree behaviorTree, AbstractActor unit, GameInstance game)
    {
        LanceDetectsEnemiesNode lanceDetectsEnemies0000 = new LanceDetectsEnemiesNode("lanceDetectsEnemies0000", behaviorTree, unit);

        FindDetectedEnemiesNode findDetectedEnemies0000 = new FindDetectedEnemiesNode("findDetectedEnemies0000", behaviorTree, unit);

        IsMovementAvailableForUnitNode movementAvailable0000 = new IsMovementAvailableForUnitNode("movementAvailable0000", behaviorTree, unit);

        BlockUntilPathfindingReadyNode blockUntilPathfindingReady0000 = new BlockUntilPathfindingReadyNode("blockUntilPathfindingReady0000", behaviorTree, unit);

        ClearMoveCandidatesNode clearMoveCandidates0000 = new ClearMoveCandidatesNode("clearMoveCandidates0000", behaviorTree, unit);

        GenerateMoveCandidatesNode generateMoveCandidates0000 = new GenerateMoveCandidatesNode("generateMoveCandidates0000", behaviorTree, unit);

        SortMoveCandidatesByDecreasingDistanceToHostilesNode sortMoveCandidatesByDecreasingDistanceToHostiles0000 = new SortMoveCandidatesByDecreasingDistanceToHostilesNode("sortMoveCandidatesByDecreasingDistanceToHostiles0000", behaviorTree, unit);

        FilterMoveCandidatesByLowestLOSToHostilesNode filterMoveCandidatesByLowestLOSToHostiles0000 = new FilterMoveCandidatesByLowestLOSToHostilesNode("filterMoveCandidatesByLowestLOSToHostiles0000", behaviorTree, unit);

        MoveTowardsHighestPriorityMoveCandidateNode moveTowardsHighestPriorityMoveCandidate0000 = new MoveTowardsHighestPriorityMoveCandidateNode("moveTowardsHighestPriorityMoveCandidate0000", behaviorTree, unit, false);

        SequenceNode run_away = new SequenceNode("run_away", behaviorTree, unit);
        run_away.AddChild(lanceDetectsEnemies0000);
        run_away.AddChild(findDetectedEnemies0000);
        run_away.AddChild(movementAvailable0000);
        run_away.AddChild(blockUntilPathfindingReady0000);
        run_away.AddChild(clearMoveCandidates0000);
        run_away.AddChild(generateMoveCandidates0000);
        run_away.AddChild(sortMoveCandidatesByDecreasingDistanceToHostiles0000);
        run_away.AddChild(filterMoveCandidatesByLowestLOSToHostiles0000);
        run_away.AddChild(moveTowardsHighestPriorityMoveCandidate0000);

        BraceNode brace0000 = new BraceNode("brace0000", behaviorTree, unit);

        SelectorNode flee_AI_root = new SelectorNode("flee_AI_root", behaviorTree, unit);
        flee_AI_root.AddChild(run_away);
        flee_AI_root.AddChild(brace0000);

        return flee_AI_root;
    }
}
