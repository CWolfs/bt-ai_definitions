//
// DO NOT MODIFY THIS FILE.
//
// This file is automatically generated using the behavior_tree_translator.py script
// on the file: ../../Assets/Behavior Tree Definitions\bt_core_ai.xml
//

using BattleTech;


public static class CoreAI_BT
{
    public static BehaviorNode InitRootNode(BehaviorTree behaviorTree, AbstractActor unit, GameInstance game)
    {
        ClearSensorLockNode clearSensorLock0000 = new ClearSensorLockNode("clearSensorLock0000", behaviorTree, unit);

        ClearActiveProbeHasTargetsNode clearActiveProbeHasTargets0000 = new ClearActiveProbeHasTargetsNode("clearActiveProbeHasTargets0000", behaviorTree, unit);

        SequenceNode sequence0000 = new SequenceNode("sequence0000", behaviorTree, unit);
        sequence0000.AddChild(clearSensorLock0000);
        sequence0000.AddChild(clearActiveProbeHasTargets0000);

        SuccessDecoratorNode successDecorator0000 = new SuccessDecoratorNode("successDecorator0000", behaviorTree, unit);
        successDecorator0000.AddChild(sequence0000);

        InverterNode startup_cleanup = new InverterNode("startup_cleanup", behaviorTree, unit);
        startup_cleanup.AddChild(successDecorator0000);

        IsShutDownNode isShutdown0000 = new IsShutDownNode("isShutdown0000", behaviorTree, unit);

        MechStartUpNode mechStartUp0000 = new MechStartUpNode("mechStartUp0000", behaviorTree, unit);

        SequenceNode if_shutdown__restart = new SequenceNode("if_shutdown__restart", behaviorTree, unit);
        if_shutdown__restart.AddChild(isShutdown0000);
        if_shutdown__restart.AddChild(mechStartUp0000);

        IsMovementAvailableForUnitNode movementAvailable0000 = new IsMovementAvailableForUnitNode("movementAvailable0000", behaviorTree, unit);

        IsProneNode isProne0000 = new IsProneNode("isProne0000", behaviorTree, unit);

        StandNode stand0000 = new StandNode("stand0000", behaviorTree, unit);

        SequenceNode if_prone__stand_up = new SequenceNode("if_prone__stand_up", behaviorTree, unit);
        if_prone__stand_up.AddChild(movementAvailable0000);
        if_prone__stand_up.AddChild(isProne0000);
        if_prone__stand_up.AddChild(stand0000);

        InspireAvailableNode inspireAvailable0000 = new InspireAvailableNode("inspireAvailable0000", behaviorTree, unit);

        IsMovementAvailableForUnitNode movementAvailable0001 = new IsMovementAvailableForUnitNode("movementAvailable0001", behaviorTree, unit);

        BlockUntilPathfindingReadyNode blockUntilPathfindingReady0000 = new BlockUntilPathfindingReadyNode("blockUntilPathfindingReady0000", behaviorTree, unit);

        SequenceNode sequence0001 = new SequenceNode("sequence0001", behaviorTree, unit);
        sequence0001.AddChild(movementAvailable0001);
        sequence0001.AddChild(blockUntilPathfindingReady0000);

        SuccessDecoratorNode successDecorator0001 = new SuccessDecoratorNode("successDecorator0001", behaviorTree, unit);
        successDecorator0001.AddChild(sequence0001);

        EvaluateInspirationValueNode evaluateInspirationValue0000 = new EvaluateInspirationValueNode("evaluateInspirationValue0000", behaviorTree, unit);

        ClaimInspirationNode claimInspiration0000 = new ClaimInspirationNode("claimInspiration0000", behaviorTree, unit);

        SequenceNode if_inspire_available__maybe_inspire = new SequenceNode("if_inspire_available__maybe_inspire", behaviorTree, unit);
        if_inspire_available__maybe_inspire.AddChild(inspireAvailable0000);
        if_inspire_available__maybe_inspire.AddChild(successDecorator0001);
        if_inspire_available__maybe_inspire.AddChild(evaluateInspirationValue0000);
        if_inspire_available__maybe_inspire.AddChild(claimInspiration0000);

        IsMovementAvailableForUnitNode movementAvailable0002 = new IsMovementAvailableForUnitNode("movementAvailable0002", behaviorTree, unit);

        IsInsideEncounterBoundsNode isInsideEncounterBounds0000 = new IsInsideEncounterBoundsNode("isInsideEncounterBounds0000", behaviorTree, unit);

        InverterNode inverter0000 = new InverterNode("inverter0000", behaviorTree, unit);
        inverter0000.AddChild(isInsideEncounterBounds0000);

        BlockUntilPathfindingReadyNode blockUntilPathfindingReady0001 = new BlockUntilPathfindingReadyNode("blockUntilPathfindingReady0001", behaviorTree, unit);

        MoveInsideEncounterBoundsNode moveInsideEncounterBounds0000 = new MoveInsideEncounterBoundsNode("moveInsideEncounterBounds0000", behaviorTree, unit);

        SequenceNode get_inside_encounter_bounds = new SequenceNode("get_inside_encounter_bounds", behaviorTree, unit);
        get_inside_encounter_bounds.AddChild(movementAvailable0002);
        get_inside_encounter_bounds.AddChild(inverter0000);
        get_inside_encounter_bounds.AddChild(blockUntilPathfindingReady0001);
        get_inside_encounter_bounds.AddChild(moveInsideEncounterBounds0000);

        IsMovementAvailableForUnitNode movementAvailable0003 = new IsMovementAvailableForUnitNode("movementAvailable0003", behaviorTree, unit);

        HasStayInsideRegionNode hasStayInsideRegion0000 = new HasStayInsideRegionNode("hasStayInsideRegion0000", behaviorTree, unit);

        IsInsideStayInsideRegionNode isInsideStayInsideRegion0000 = new IsInsideStayInsideRegionNode("isInsideStayInsideRegion0000", behaviorTree, unit);

        InverterNode inverter0001 = new InverterNode("inverter0001", behaviorTree, unit);
        inverter0001.AddChild(isInsideStayInsideRegion0000);

        BlockUntilPathfindingReadyNode blockUntilPathfindingReady0002 = new BlockUntilPathfindingReadyNode("blockUntilPathfindingReady0002", behaviorTree, unit);

        MoveToStayInsideRegionNode moveToStayInsideRegion0000 = new MoveToStayInsideRegionNode("moveToStayInsideRegion0000", behaviorTree, unit);

        SequenceNode comply_with_stay_inside_region_order = new SequenceNode("comply_with_stay_inside_region_order", behaviorTree, unit);
        comply_with_stay_inside_region_order.AddChild(movementAvailable0003);
        comply_with_stay_inside_region_order.AddChild(hasStayInsideRegion0000);
        comply_with_stay_inside_region_order.AddChild(inverter0001);
        comply_with_stay_inside_region_order.AddChild(blockUntilPathfindingReady0002);
        comply_with_stay_inside_region_order.AddChild(moveToStayInsideRegion0000);

        IsMovementAvailableForUnitNode movementAvailable0004 = new IsMovementAvailableForUnitNode("movementAvailable0004", behaviorTree, unit);

        BlockUntilPathfindingReadyNode blockUntilPathfindingReady0003 = new BlockUntilPathfindingReadyNode("blockUntilPathfindingReady0003", behaviorTree, unit);

        LanceHasPreAttackDestinationNode hasPreAttackLanceMove0000 = new LanceHasPreAttackDestinationNode("hasPreAttackLanceMove0000", behaviorTree, unit);

        MoveLanceToPreAttackDestinationNode moveLanceToPreAttackDestination0000 = new MoveLanceToPreAttackDestinationNode("moveLanceToPreAttackDestination0000", behaviorTree, unit);

        SequenceNode pre_attack_lance_move = new SequenceNode("pre_attack_lance_move", behaviorTree, unit);
        pre_attack_lance_move.AddChild(hasPreAttackLanceMove0000);
        pre_attack_lance_move.AddChild(moveLanceToPreAttackDestination0000);

        UnitHasPreAttackDestinationNode hasPreAttackUnitMove0000 = new UnitHasPreAttackDestinationNode("hasPreAttackUnitMove0000", behaviorTree, unit);

        MoveUnitToPreAttackDestinationNode moveUnitToPreAttackDestination0000 = new MoveUnitToPreAttackDestinationNode("moveUnitToPreAttackDestination0000", behaviorTree, unit);

        SequenceNode pre_attack_unit_move = new SequenceNode("pre_attack_unit_move", behaviorTree, unit);
        pre_attack_unit_move.AddChild(hasPreAttackUnitMove0000);
        pre_attack_unit_move.AddChild(moveUnitToPreAttackDestination0000);

        SelectorNode selector0000 = new SelectorNode("selector0000", behaviorTree, unit);
        selector0000.AddChild(pre_attack_lance_move);
        selector0000.AddChild(pre_attack_unit_move);

        SequenceNode pre_attack_move = new SequenceNode("pre_attack_move", behaviorTree, unit);
        pre_attack_move.AddChild(movementAvailable0004);
        pre_attack_move.AddChild(blockUntilPathfindingReady0003);
        pre_attack_move.AddChild(selector0000);

        LanceDetectsEnemiesNode lanceDetectsEnemies0000 = new LanceDetectsEnemiesNode("lanceDetectsEnemies0000", behaviorTree, unit);

        FindDetectedEnemiesNode findDetectedEnemies0000 = new FindDetectedEnemiesNode("findDetectedEnemies0000", behaviorTree, unit);

        IsAlertedNode isAlerted0000 = new IsAlertedNode("isAlerted0000", behaviorTree, unit);

        IsMovementAvailableForUnitNode movementAvailable0005 = new IsMovementAvailableForUnitNode("movementAvailable0005", behaviorTree, unit);

        BlockUntilPathfindingReadyNode blockUntilPathfindingReady0004 = new BlockUntilPathfindingReadyNode("blockUntilPathfindingReady0004", behaviorTree, unit);

        HasActiveProbeAbilityNode hasActiveProbeAbility0000 = new HasActiveProbeAbilityNode("hasActiveProbeAbility0000", behaviorTree, unit);

        ClearActiveProbeHasTargetsNode clearActiveProbeHasTargets0001 = new ClearActiveProbeHasTargetsNode("clearActiveProbeHasTargets0001", behaviorTree, unit);

        SequenceNode clearActiveProbe = new SequenceNode("clearActiveProbe", behaviorTree, unit);
        clearActiveProbe.AddChild(hasActiveProbeAbility0000);
        clearActiveProbe.AddChild(clearActiveProbeHasTargets0001);

        SuccessDecoratorNode reset_active_probe = new SuccessDecoratorNode("reset_active_probe", behaviorTree, unit);
        reset_active_probe.AddChild(clearActiveProbe);

        ClearSensorLockNode clearSensorLock0001 = new ClearSensorLockNode("clearSensorLock0001", behaviorTree, unit);

        HasSensorLockAbilityNode hasSensorLockAbility0000 = new HasSensorLockAbilityNode("hasSensorLockAbility0000", behaviorTree, unit);

        HasSensorLockTargetNode hasSensorLockTarget0000 = new HasSensorLockTargetNode("hasSensorLockTarget0000", behaviorTree, unit);

        SortEnemiesBySensorLockQualityNode sortEnemiesBySensorLockQuality0000 = new SortEnemiesBySensorLockQualityNode("sortEnemiesBySensorLockQuality0000", behaviorTree, unit);

        RecordHighestPriorityEnemyAsSensorLockTargetNode recordHighestPriorityEnemyAsSensorLockTarget0000 = new RecordHighestPriorityEnemyAsSensorLockTargetNode("recordHighestPriorityEnemyAsSensorLockTarget0000", behaviorTree, unit);

        SequenceNode evalSensorLock = new SequenceNode("evalSensorLock", behaviorTree, unit);
        evalSensorLock.AddChild(clearSensorLock0001);
        evalSensorLock.AddChild(hasSensorLockAbility0000);
        evalSensorLock.AddChild(hasSensorLockTarget0000);
        evalSensorLock.AddChild(sortEnemiesBySensorLockQuality0000);
        evalSensorLock.AddChild(recordHighestPriorityEnemyAsSensorLockTarget0000);

        SuccessDecoratorNode maybe_sensor_lock = new SuccessDecoratorNode("maybe_sensor_lock", behaviorTree, unit);
        maybe_sensor_lock.AddChild(evalSensorLock);

        IsOverheatedNode isOverheated0000 = new IsOverheatedNode("isOverheated0000", behaviorTree, unit);

        RandomPercentageLessThanBVNode randomPercentageLessThanBV0000 = new RandomPercentageLessThanBVNode("randomPercentageLessThanBV0000", behaviorTree, unit, BehaviorVariableName.Float_BraceWhenOverheatedPercentage);

        AnyHostileBehindMeNode anyHostileBehindMe0000 = new AnyHostileBehindMeNode("anyHostileBehindMe0000", behaviorTree, unit);

        InverterNode inverter0002 = new InverterNode("inverter0002", behaviorTree, unit);
        inverter0002.AddChild(anyHostileBehindMe0000);

        BraceNode brace0000 = new BraceNode("brace0000", behaviorTree, unit);

        SequenceNode if_overheated__maybe_brace = new SequenceNode("if_overheated__maybe_brace", behaviorTree, unit);
        if_overheated__maybe_brace.AddChild(isOverheated0000);
        if_overheated__maybe_brace.AddChild(randomPercentageLessThanBV0000);
        if_overheated__maybe_brace.AddChild(inverter0002);
        if_overheated__maybe_brace.AddChild(brace0000);

        IsBVTrueNode isBVTrue0000 = new IsBVTrueNode("isBVTrue0000", behaviorTree, unit, BehaviorVariableName.Bool_AlwaysDefensiveMood);

        InverterNode inverter0003 = new InverterNode("inverter0003", behaviorTree, unit);
        inverter0003.AddChild(isBVTrue0000);

        IsBVTrueNode isBVTrue0001 = new IsBVTrueNode("isBVTrue0001", behaviorTree, unit, BehaviorVariableName.Bool_AlwaysOffensiveMood);

        HasRangedWeaponsNode hasRangedWeapons0000 = new HasRangedWeaponsNode("hasRangedWeapons0000", behaviorTree, unit);

        InverterNode inverter0004 = new InverterNode("inverter0004", behaviorTree, unit);
        inverter0004.AddChild(hasRangedWeapons0000);

        RandomPercentageLessThanBVNode randomPercentageLessThanBV0001 = new RandomPercentageLessThanBVNode("randomPercentageLessThanBV0001", behaviorTree, unit, BehaviorVariableName.Float_UnsteadyCausesDefensiveMovePercentage);

        IsUnsteadyNode isUnsteady0000 = new IsUnsteadyNode("isUnsteady0000", behaviorTree, unit);

        SequenceNode sequence0002 = new SequenceNode("sequence0002", behaviorTree, unit);
        sequence0002.AddChild(randomPercentageLessThanBV0001);
        sequence0002.AddChild(isUnsteady0000);

        InverterNode inverter0005 = new InverterNode("inverter0005", behaviorTree, unit);
        inverter0005.AddChild(sequence0002);

        SelectorNode selector0002 = new SelectorNode("selector0002", behaviorTree, unit);
        selector0002.AddChild(isBVTrue0001);
        selector0002.AddChild(inverter0004);
        selector0002.AddChild(inverter0005);

        IsBVTrueNode isBVTrue0002 = new IsBVTrueNode("isBVTrue0002", behaviorTree, unit, BehaviorVariableName.Bool_RuthlessPriorityTargeting);

        WasTargetedRecentlyNode wasTargetedRecently0000 = new WasTargetedRecentlyNode("wasTargetedRecently0000", behaviorTree, unit);

        InverterNode inverter0006 = new InverterNode("inverter0006", behaviorTree, unit);
        inverter0006.AddChild(wasTargetedRecently0000);

        HasPriorityTargetNode hasPriorityTarget0000 = new HasPriorityTargetNode("hasPriorityTarget0000", behaviorTree, unit);

        SetMoodNode setMood0000 = new SetMoodNode("setMood0000", behaviorTree, unit, AIMood.Ruthless);

        SequenceNode sequence0003 = new SequenceNode("sequence0003", behaviorTree, unit);
        sequence0003.AddChild(isBVTrue0002);
        sequence0003.AddChild(inverter0006);
        sequence0003.AddChild(hasPriorityTarget0000);
        sequence0003.AddChild(setMood0000);

        HasRecordedSensorLockTargetNode hasRecordedSensorLockTarget0000 = new HasRecordedSensorLockTargetNode("hasRecordedSensorLockTarget0000", behaviorTree, unit);

        SetMoodNode setMood0001 = new SetMoodNode("setMood0001", behaviorTree, unit, AIMood.SensorLocking);

        SequenceNode sequence0004 = new SequenceNode("sequence0004", behaviorTree, unit);
        sequence0004.AddChild(hasRecordedSensorLockTarget0000);
        sequence0004.AddChild(setMood0001);

        SetMoodNode setMood0002 = new SetMoodNode("setMood0002", behaviorTree, unit, AIMood.Aggressive);

        SelectorNode selector0003 = new SelectorNode("selector0003", behaviorTree, unit);
        selector0003.AddChild(sequence0003);
        selector0003.AddChild(sequence0004);
        selector0003.AddChild(setMood0002);

        CanMoveAndShootWithoutOverheatingNode canMoveAndShootWithoutOverheating0000 = new CanMoveAndShootWithoutOverheatingNode("canMoveAndShootWithoutOverheating0000", behaviorTree, unit);

        CanMeleeHostileTargetsNode canMeleeHostileTargets0000 = new CanMeleeHostileTargetsNode("canMeleeHostileTargets0000", behaviorTree, unit);

        CanDFAHostileTargetsNode canDFAHostileTargets0000 = new CanDFAHostileTargetsNode("canDFAHostileTargets0000", behaviorTree, unit);

        SelectorNode selector0004 = new SelectorNode("selector0004", behaviorTree, unit);
        selector0004.AddChild(canMoveAndShootWithoutOverheating0000);
        selector0004.AddChild(canMeleeHostileTargets0000);
        selector0004.AddChild(canDFAHostileTargets0000);

        SortEnemiesByThreatNode sortEnemiesByThreat0000 = new SortEnemiesByThreatNode("sortEnemiesByThreat0000", behaviorTree, unit);

        WasTargetedRecentlyNode wasTargetedRecently0001 = new WasTargetedRecentlyNode("wasTargetedRecently0001", behaviorTree, unit);

        InverterNode inverter0007 = new InverterNode("inverter0007", behaviorTree, unit);
        inverter0007.AddChild(wasTargetedRecently0001);

        HasPriorityTargetNode hasPriorityTarget0001 = new HasPriorityTargetNode("hasPriorityTarget0001", behaviorTree, unit);

        RandomPercentageLessThanBVNode randomPercentageLessThanBV0002 = new RandomPercentageLessThanBVNode("randomPercentageLessThanBV0002", behaviorTree, unit, BehaviorVariableName.Float_PriorityMovePercentage);

        UsePreferredTargetToHitThreshold usePreferredTargetToHitThreshold0000 = new UsePreferredTargetToHitThreshold("usePreferredTargetToHitThreshold0000", behaviorTree, unit);

        SortEnemiesByPriorityListNode sortEnemiesByPriorityList0000 = new SortEnemiesByPriorityListNode("sortEnemiesByPriorityList0000", behaviorTree, unit);

        SequenceNode sequence0006 = new SequenceNode("sequence0006", behaviorTree, unit);
        sequence0006.AddChild(inverter0007);
        sequence0006.AddChild(hasPriorityTarget0001);
        sequence0006.AddChild(randomPercentageLessThanBV0002);
        sequence0006.AddChild(usePreferredTargetToHitThreshold0000);
        sequence0006.AddChild(sortEnemiesByPriorityList0000);

        MaybeFilterOutPriorityTargetsNode maybeFilterOutPriorityTargets0000 = new MaybeFilterOutPriorityTargetsNode("maybeFilterOutPriorityTargets0000", behaviorTree, unit);

        FilterKeepingRecentAttackersNode filterKeepingRecentAttackers0000 = new FilterKeepingRecentAttackersNode("filterKeepingRecentAttackers0000", behaviorTree, unit);

        SucceedNode succeed0000 = new SucceedNode("succeed0000", behaviorTree, unit);

        SelectorNode priorityMove = new SelectorNode("priorityMove", behaviorTree, unit);
        priorityMove.AddChild(sequence0006);
        priorityMove.AddChild(maybeFilterOutPriorityTargets0000);
        priorityMove.AddChild(filterKeepingRecentAttackers0000);
        priorityMove.AddChild(succeed0000);

        UseNormalToHitThreshold useNormalToHitThreshold0000 = new UseNormalToHitThreshold("useNormalToHitThreshold0000", behaviorTree, unit);

        ClearMoveCandidatesNode clearMoveCandidates0000 = new ClearMoveCandidatesNode("clearMoveCandidates0000", behaviorTree, unit);

        SetNoLOFToHostilesCacheNode setNoLOFToHostilesCache0000 = new SetNoLOFToHostilesCacheNode("setNoLOFToHostilesCache0000", behaviorTree, unit, false);

        IsBVTrueNode isBVTrue0003 = new IsBVTrueNode("isBVTrue0003", behaviorTree, unit, BehaviorVariableName.Bool_SimpleShortRangeLOF);

        HasLOFToAnyHostileFromReachableLocationsNode hasLOFToAnyHostileFromReachableLocations0000 = new HasLOFToAnyHostileFromReachableLocationsNode("hasLOFToAnyHostileFromReachableLocations0000", behaviorTree, unit);

        SequenceNode simple_LOF = new SequenceNode("simple_LOF", behaviorTree, unit);
        simple_LOF.AddChild(isBVTrue0003);
        simple_LOF.AddChild(hasLOFToAnyHostileFromReachableLocations0000);

        IsBVTrueNode isBVTrue0004 = new IsBVTrueNode("isBVTrue0004", behaviorTree, unit, BehaviorVariableName.Bool_SimpleShortRangeLOF);

        InverterNode inverter0008 = new InverterNode("inverter0008", behaviorTree, unit);
        inverter0008.AddChild(isBVTrue0004);

        AreAnyHostilesInWeaponRangeNode areAnyHostilesInWeaponRange0000 = new AreAnyHostilesInWeaponRangeNode("areAnyHostilesInWeaponRange0000", behaviorTree, unit);

        HasDirectLOFToAnyHostileFromReachableLocationsNode hasDirectLOFToAnyHostileFromReachableLocations0000 = new HasDirectLOFToAnyHostileFromReachableLocationsNode("hasDirectLOFToAnyHostileFromReachableLocations0000", behaviorTree, unit);

        SequenceNode not_simple_LOF = new SequenceNode("not_simple_LOF", behaviorTree, unit);
        not_simple_LOF.AddChild(inverter0008);
        not_simple_LOF.AddChild(areAnyHostilesInWeaponRange0000);
        not_simple_LOF.AddChild(hasDirectLOFToAnyHostileFromReachableLocations0000);

        SelectorNode selector0005 = new SelectorNode("selector0005", behaviorTree, unit);
        selector0005.AddChild(simple_LOF);
        selector0005.AddChild(not_simple_LOF);

        InverterNode no_LOF_to_hostiles_in_range = new InverterNode("no_LOF_to_hostiles_in_range", behaviorTree, unit);
        no_LOF_to_hostiles_in_range.AddChild(selector0005);

        SetNoLOFToHostilesCacheNode setNoLOFToHostilesCache0001 = new SetNoLOFToHostilesCacheNode("setNoLOFToHostilesCache0001", behaviorTree, unit, true);

        SequenceNode sequence0007 = new SequenceNode("sequence0007", behaviorTree, unit);
        sequence0007.AddChild(setNoLOFToHostilesCache0000);
        sequence0007.AddChild(no_LOF_to_hostiles_in_range);
        sequence0007.AddChild(setNoLOFToHostilesCache0001);

        SuccessDecoratorNode successDecorator0002 = new SuccessDecoratorNode("successDecorator0002", behaviorTree, unit);
        successDecorator0002.AddChild(sequence0007);

        IsUrbanBiomeNode isUrbanBiome0000 = new IsUrbanBiomeNode("isUrbanBiome0000", behaviorTree, unit);

        IsBVTrueNode isBVTrue0005 = new IsBVTrueNode("isBVTrue0005", behaviorTree, unit, BehaviorVariableName.Bool_IsNavigatingNook);

        SetNavigatingNookNode setNavigatingNook0000 = new SetNavigatingNookNode("setNavigatingNook0000", behaviorTree, unit, false);

        IsBVTrueNode isBVTrue0006 = new IsBVTrueNode("isBVTrue0006", behaviorTree, unit, BehaviorVariableName.Bool_NoLOFToHostiles);

        SetNavigatingNookNode setNavigatingNook0001 = new SetNavigatingNookNode("setNavigatingNook0001", behaviorTree, unit, true);

        GenerateForcedNormalMoveTowardDistantHostileCandidatesNode generateForcedNormalMoveTowardDistantHostileCandidates0000 = new GenerateForcedNormalMoveTowardDistantHostileCandidatesNode("generateForcedNormalMoveTowardDistantHostileCandidates0000", behaviorTree, unit);

        HighestMoveCandidateIsStationaryNode highestMoveCandidateIsStationary0000 = new HighestMoveCandidateIsStationaryNode("highestMoveCandidateIsStationary0000", behaviorTree, unit);

        InverterNode inverter0009 = new InverterNode("inverter0009", behaviorTree, unit);
        inverter0009.AddChild(highestMoveCandidateIsStationary0000);

        MoveTowardsHighestPriorityMoveCandidateNode moveTowardsHighestPriorityMoveCandidate0000 = new MoveTowardsHighestPriorityMoveCandidateNode("moveTowardsHighestPriorityMoveCandidate0000", behaviorTree, unit, false);

        SequenceNode move_out_of_nook = new SequenceNode("move_out_of_nook", behaviorTree, unit);
        move_out_of_nook.AddChild(isUrbanBiome0000);
        move_out_of_nook.AddChild(isBVTrue0005);
        move_out_of_nook.AddChild(setNavigatingNook0000);
        move_out_of_nook.AddChild(isBVTrue0006);
        move_out_of_nook.AddChild(setNavigatingNook0001);
        move_out_of_nook.AddChild(generateForcedNormalMoveTowardDistantHostileCandidates0000);
        move_out_of_nook.AddChild(inverter0009);
        move_out_of_nook.AddChild(moveTowardsHighestPriorityMoveCandidate0000);

        IsBVTrueNode isBVTrue0007 = new IsBVTrueNode("isBVTrue0007", behaviorTree, unit, BehaviorVariableName.Bool_NoLOFToHostiles);

        IsInterleavedNode isInterleaved0000 = new IsInterleavedNode("isInterleaved0000", behaviorTree, unit);

        InverterNode inverter0010 = new InverterNode("inverter0010", behaviorTree, unit);
        inverter0010.AddChild(isInterleaved0000);

        HasRecordedSensorLockTargetNode hasRecordedSensorLockTarget0001 = new HasRecordedSensorLockTargetNode("hasRecordedSensorLockTarget0001", behaviorTree, unit);

        SensorLockRecordedSensorLockTargetNode sensorLockRecordedSensorLockTarget0000 = new SensorLockRecordedSensorLockTargetNode("sensorLockRecordedSensorLockTarget0000", behaviorTree, unit);

        ClearSensorLockNode clearSensorLock0002 = new ClearSensorLockNode("clearSensorLock0002", behaviorTree, unit);

        SequenceNode sequence0008 = new SequenceNode("sequence0008", behaviorTree, unit);
        sequence0008.AddChild(inverter0010);
        sequence0008.AddChild(hasRecordedSensorLockTarget0001);
        sequence0008.AddChild(sensorLockRecordedSensorLockTarget0000);
        sequence0008.AddChild(clearSensorLock0002);

        SuccessDecoratorNode successDecorator0003 = new SuccessDecoratorNode("successDecorator0003", behaviorTree, unit);
        successDecorator0003.AddChild(sequence0008);

        IsSprintAvailableForUnitNode sprintAvailable0000 = new IsSprintAvailableForUnitNode("sprintAvailable0000", behaviorTree, unit);

        AreAnyDetectedHostilesInWeaponRangePlusSprintDistanceNode areAnyDetectedHostilesInWeaponRangePlusSprintDistance0000 = new AreAnyDetectedHostilesInWeaponRangePlusSprintDistanceNode("areAnyDetectedHostilesInWeaponRangePlusSprintDistance0000", behaviorTree, unit);

        InverterNode inverter0011 = new InverterNode("inverter0011", behaviorTree, unit);
        inverter0011.AddChild(areAnyDetectedHostilesInWeaponRangePlusSprintDistance0000);

        HasRecordedSensorLockTargetNode hasRecordedSensorLockTarget0002 = new HasRecordedSensorLockTargetNode("hasRecordedSensorLockTarget0002", behaviorTree, unit);

        InverterNode inverter0012 = new InverterNode("inverter0012", behaviorTree, unit);
        inverter0012.AddChild(hasRecordedSensorLockTarget0002);

        ClearMoveCandidatesNode clearMoveCandidates0001 = new ClearMoveCandidatesNode("clearMoveCandidates0001", behaviorTree, unit);

        GenerateSprintMoveTowardDistantHostileCandidatesNode generateSprintMoveTowardDistantHostileCandidates0000 = new GenerateSprintMoveTowardDistantHostileCandidatesNode("generateSprintMoveTowardDistantHostileCandidates0000", behaviorTree, unit);

        HighestMoveCandidateIsStationaryNode highestMoveCandidateIsStationary0001 = new HighestMoveCandidateIsStationaryNode("highestMoveCandidateIsStationary0001", behaviorTree, unit);

        InverterNode inverter0013 = new InverterNode("inverter0013", behaviorTree, unit);
        inverter0013.AddChild(highestMoveCandidateIsStationary0001);

        MoveTowardsHighestPriorityMoveCandidateNode moveTowardsHighestPriorityMoveCandidate0001 = new MoveTowardsHighestPriorityMoveCandidateNode("moveTowardsHighestPriorityMoveCandidate0001", behaviorTree, unit, false);

        SequenceNode sequence0009 = new SequenceNode("sequence0009", behaviorTree, unit);
        sequence0009.AddChild(clearMoveCandidates0001);
        sequence0009.AddChild(generateSprintMoveTowardDistantHostileCandidates0000);
        sequence0009.AddChild(inverter0013);
        sequence0009.AddChild(moveTowardsHighestPriorityMoveCandidate0001);

        ClearMoveCandidatesNode clearMoveCandidates0002 = new ClearMoveCandidatesNode("clearMoveCandidates0002", behaviorTree, unit);

        GenerateSprintMoveTowardTeammatesCandidatesNode generateSprintMoveTowardTeammatesCandidates0000 = new GenerateSprintMoveTowardTeammatesCandidatesNode("generateSprintMoveTowardTeammatesCandidates0000", behaviorTree, unit);

        HighestMoveCandidateIsStationaryNode highestMoveCandidateIsStationary0002 = new HighestMoveCandidateIsStationaryNode("highestMoveCandidateIsStationary0002", behaviorTree, unit);

        InverterNode inverter0014 = new InverterNode("inverter0014", behaviorTree, unit);
        inverter0014.AddChild(highestMoveCandidateIsStationary0002);

        MoveTowardsHighestPriorityMoveCandidateNode moveTowardsHighestPriorityMoveCandidate0002 = new MoveTowardsHighestPriorityMoveCandidateNode("moveTowardsHighestPriorityMoveCandidate0002", behaviorTree, unit, false);

        SequenceNode sequence0010 = new SequenceNode("sequence0010", behaviorTree, unit);
        sequence0010.AddChild(clearMoveCandidates0002);
        sequence0010.AddChild(generateSprintMoveTowardTeammatesCandidates0000);
        sequence0010.AddChild(inverter0014);
        sequence0010.AddChild(moveTowardsHighestPriorityMoveCandidate0002);

        SelectorNode selector0008 = new SelectorNode("selector0008", behaviorTree, unit);
        selector0008.AddChild(sequence0009);
        selector0008.AddChild(sequence0010);

        SequenceNode sprint_towards_combat = new SequenceNode("sprint_towards_combat", behaviorTree, unit);
        sprint_towards_combat.AddChild(sprintAvailable0000);
        sprint_towards_combat.AddChild(inverter0011);
        sprint_towards_combat.AddChild(inverter0012);
        sprint_towards_combat.AddChild(selector0008);

        ClearMoveCandidatesNode clearMoveCandidates0003 = new ClearMoveCandidatesNode("clearMoveCandidates0003", behaviorTree, unit);

        GenerateNormalMoveTowardDistantHostileCandidatesNode generateNormalMoveTowardDistantHostileCandidates0000 = new GenerateNormalMoveTowardDistantHostileCandidatesNode("generateNormalMoveTowardDistantHostileCandidates0000", behaviorTree, unit);

        IsUrbanBiomeNode isUrbanBiome0001 = new IsUrbanBiomeNode("isUrbanBiome0001", behaviorTree, unit);

        IsInMinWeaponRange isInMinWeaponRange0000 = new IsInMinWeaponRange("isInMinWeaponRange0000", behaviorTree, unit);

        SetNavigatingNookNode setNavigatingNook0002 = new SetNavigatingNookNode("setNavigatingNook0002", behaviorTree, unit, true);

        GenerateForcedNormalMoveTowardDistantHostileCandidatesNode generateForcedNormalMoveTowardDistantHostileCandidates0001 = new GenerateForcedNormalMoveTowardDistantHostileCandidatesNode("generateForcedNormalMoveTowardDistantHostileCandidates0001", behaviorTree, unit);

        SequenceNode sequence0012 = new SequenceNode("sequence0012", behaviorTree, unit);
        sequence0012.AddChild(isUrbanBiome0001);
        sequence0012.AddChild(isInMinWeaponRange0000);
        sequence0012.AddChild(setNavigatingNook0002);
        sequence0012.AddChild(generateForcedNormalMoveTowardDistantHostileCandidates0001);

        SelectorNode selector0010 = new SelectorNode("selector0010", behaviorTree, unit);
        selector0010.AddChild(generateNormalMoveTowardDistantHostileCandidates0000);
        selector0010.AddChild(sequence0012);

        HighestMoveCandidateIsStationaryNode highestMoveCandidateIsStationary0003 = new HighestMoveCandidateIsStationaryNode("highestMoveCandidateIsStationary0003", behaviorTree, unit);

        InverterNode inverter0015 = new InverterNode("inverter0015", behaviorTree, unit);
        inverter0015.AddChild(highestMoveCandidateIsStationary0003);

        MoveTowardsHighestPriorityMoveCandidateNode moveTowardsHighestPriorityMoveCandidate0003 = new MoveTowardsHighestPriorityMoveCandidateNode("moveTowardsHighestPriorityMoveCandidate0003", behaviorTree, unit, false);

        SequenceNode sequence0011 = new SequenceNode("sequence0011", behaviorTree, unit);
        sequence0011.AddChild(clearMoveCandidates0003);
        sequence0011.AddChild(selector0010);
        sequence0011.AddChild(inverter0015);
        sequence0011.AddChild(moveTowardsHighestPriorityMoveCandidate0003);

        ClearMoveCandidatesNode clearMoveCandidates0004 = new ClearMoveCandidatesNode("clearMoveCandidates0004", behaviorTree, unit);

        GenerateNormalMoveTowardTeammatesCandidatesNode generateNormalMoveTowardTeammatesCandidates0000 = new GenerateNormalMoveTowardTeammatesCandidatesNode("generateNormalMoveTowardTeammatesCandidates0000", behaviorTree, unit);

        HighestMoveCandidateIsStationaryNode highestMoveCandidateIsStationary0004 = new HighestMoveCandidateIsStationaryNode("highestMoveCandidateIsStationary0004", behaviorTree, unit);

        InverterNode inverter0016 = new InverterNode("inverter0016", behaviorTree, unit);
        inverter0016.AddChild(highestMoveCandidateIsStationary0004);

        MoveTowardsHighestPriorityMoveCandidateNode moveTowardsHighestPriorityMoveCandidate0004 = new MoveTowardsHighestPriorityMoveCandidateNode("moveTowardsHighestPriorityMoveCandidate0004", behaviorTree, unit, false);

        SequenceNode sequence0013 = new SequenceNode("sequence0013", behaviorTree, unit);
        sequence0013.AddChild(clearMoveCandidates0004);
        sequence0013.AddChild(generateNormalMoveTowardTeammatesCandidates0000);
        sequence0013.AddChild(inverter0016);
        sequence0013.AddChild(moveTowardsHighestPriorityMoveCandidate0004);

        SelectorNode selector0009 = new SelectorNode("selector0009", behaviorTree, unit);
        selector0009.AddChild(sequence0011);
        selector0009.AddChild(sequence0013);

        SequenceNode normal_move_towards_combat = new SequenceNode("normal_move_towards_combat", behaviorTree, unit);
        normal_move_towards_combat.AddChild(selector0009);

        SelectorNode selector0007 = new SelectorNode("selector0007", behaviorTree, unit);
        selector0007.AddChild(sprint_towards_combat);
        selector0007.AddChild(normal_move_towards_combat);

        SequenceNode move_towards_combat = new SequenceNode("move_towards_combat", behaviorTree, unit);
        move_towards_combat.AddChild(isBVTrue0007);
        move_towards_combat.AddChild(successDecorator0003);
        move_towards_combat.AddChild(selector0007);

        GenerateForwardMoveCandidatesNode generateForwardMoveCandidates0000 = new GenerateForwardMoveCandidatesNode("generateForwardMoveCandidates0000", behaviorTree, unit);

        GenerateReverseMoveCandidatesNode generateReverseMoveCandidates0000 = new GenerateReverseMoveCandidatesNode("generateReverseMoveCandidates0000", behaviorTree, unit);

        IsBVTrueNode isBVTrue0008 = new IsBVTrueNode("isBVTrue0008", behaviorTree, unit, BehaviorVariableName.Bool_AllowAttack);

        CanMeleeHostileTargetsNode canMeleeHostileTargets0001 = new CanMeleeHostileTargetsNode("canMeleeHostileTargets0001", behaviorTree, unit);

        GenerateMeleeMoveCandidatesNode generateMeleeMoveCandidates0000 = new GenerateMeleeMoveCandidatesNode("generateMeleeMoveCandidates0000", behaviorTree, unit);

        SequenceNode sequence0015 = new SequenceNode("sequence0015", behaviorTree, unit);
        sequence0015.AddChild(isBVTrue0008);
        sequence0015.AddChild(canMeleeHostileTargets0001);
        sequence0015.AddChild(generateMeleeMoveCandidates0000);

        SuccessDecoratorNode successDecorator0004 = new SuccessDecoratorNode("successDecorator0004", behaviorTree, unit);
        successDecorator0004.AddChild(sequence0015);

        IsOverheatedNode isOverheated0001 = new IsOverheatedNode("isOverheated0001", behaviorTree, unit);

        InverterNode inverter0017 = new InverterNode("inverter0017", behaviorTree, unit);
        inverter0017.AddChild(isOverheated0001);

        GenerateJumpMoveCandidatesNode generateJumpMoveCandidates0000 = new GenerateJumpMoveCandidatesNode("generateJumpMoveCandidates0000", behaviorTree, unit);

        SequenceNode sequence0016 = new SequenceNode("sequence0016", behaviorTree, unit);
        sequence0016.AddChild(inverter0017);
        sequence0016.AddChild(generateJumpMoveCandidates0000);

        SuccessDecoratorNode successDecorator0005 = new SuccessDecoratorNode("successDecorator0005", behaviorTree, unit);
        successDecorator0005.AddChild(sequence0016);

        GenerateStationaryMoveCandidatesNode generateStationaryMoveCandidates0000 = new GenerateStationaryMoveCandidatesNode("generateStationaryMoveCandidates0000", behaviorTree, unit);

        IsSprintAvailableForUnitNode sprintAvailable0001 = new IsSprintAvailableForUnitNode("sprintAvailable0001", behaviorTree, unit);

        HasRecordedSensorLockTargetNode hasRecordedSensorLockTarget0003 = new HasRecordedSensorLockTargetNode("hasRecordedSensorLockTarget0003", behaviorTree, unit);

        InverterNode inverter0018 = new InverterNode("inverter0018", behaviorTree, unit);
        inverter0018.AddChild(hasRecordedSensorLockTarget0003);

        GenerateSprintMoveCandidatesNode generateSprintMoveCandidates0000 = new GenerateSprintMoveCandidatesNode("generateSprintMoveCandidates0000", behaviorTree, unit);

        SequenceNode sequence0017 = new SequenceNode("sequence0017", behaviorTree, unit);
        sequence0017.AddChild(sprintAvailable0001);
        sequence0017.AddChild(inverter0018);
        sequence0017.AddChild(generateSprintMoveCandidates0000);

        SuccessDecoratorNode successDecorator0006 = new SuccessDecoratorNode("successDecorator0006", behaviorTree, unit);
        successDecorator0006.AddChild(sequence0017);

        HasRecordedSensorLockTargetNode hasRecordedSensorLockTarget0004 = new HasRecordedSensorLockTargetNode("hasRecordedSensorLockTarget0004", behaviorTree, unit);

        FilterNonSensorLockMovesNode filterNonSensorLockMoves0000 = new FilterNonSensorLockMovesNode("filterNonSensorLockMoves0000", behaviorTree, unit);

        SequenceNode sequence0018 = new SequenceNode("sequence0018", behaviorTree, unit);
        sequence0018.AddChild(hasRecordedSensorLockTarget0004);
        sequence0018.AddChild(filterNonSensorLockMoves0000);

        SuccessDecoratorNode successDecorator0007 = new SuccessDecoratorNode("successDecorator0007", behaviorTree, unit);
        successDecorator0007.AddChild(sequence0018);

        IsBVTrueNode isBVTrue0009 = new IsBVTrueNode("isBVTrue0009", behaviorTree, unit, BehaviorVariableName.Bool_RuthlessPriorityTargeting);

        WasTargetedRecentlyNode wasTargetedRecently0002 = new WasTargetedRecentlyNode("wasTargetedRecently0002", behaviorTree, unit);

        InverterNode inverter0019 = new InverterNode("inverter0019", behaviorTree, unit);
        inverter0019.AddChild(wasTargetedRecently0002);

        HasPriorityTargetNode hasPriorityTarget0002 = new HasPriorityTargetNode("hasPriorityTarget0002", behaviorTree, unit);

        HasLOFToAnyHostileFromReachableLocationsNode hasLOFToAnyHostileFromReachableLocations0001 = new HasLOFToAnyHostileFromReachableLocationsNode("hasLOFToAnyHostileFromReachableLocations0001", behaviorTree, unit);

        FilterOutNonLOFMovesNode filterOutNonLOFMoves0000 = new FilterOutNonLOFMovesNode("filterOutNonLOFMoves0000", behaviorTree, unit);

        SequenceNode sequence0019 = new SequenceNode("sequence0019", behaviorTree, unit);
        sequence0019.AddChild(isBVTrue0009);
        sequence0019.AddChild(inverter0019);
        sequence0019.AddChild(hasPriorityTarget0002);
        sequence0019.AddChild(hasLOFToAnyHostileFromReachableLocations0001);
        sequence0019.AddChild(filterOutNonLOFMoves0000);

        SuccessDecoratorNode if_priority_targeting__remove_non_LOF_move_candidates = new SuccessDecoratorNode("if_priority_targeting__remove_non_LOF_move_candidates", behaviorTree, unit);
        if_priority_targeting__remove_non_LOF_move_candidates.AddChild(sequence0019);

        FilterMovesForHeatNode filterMovesForHeat0000 = new FilterMovesForHeatNode("filterMovesForHeat0000", behaviorTree, unit);

        HasMoveCandidatesNode hasMoveCandidates0000 = new HasMoveCandidatesNode("hasMoveCandidates0000", behaviorTree, unit);

        SortMoveCandidatesByInfMapNode sortMoveCandidatesByInfMap0000 = new SortMoveCandidatesByInfMapNode("sortMoveCandidatesByInfMap0000", behaviorTree, unit);

        SequenceNode sequence0020 = new SequenceNode("sequence0020", behaviorTree, unit);
        sequence0020.AddChild(hasMoveCandidates0000);
        sequence0020.AddChild(sortMoveCandidatesByInfMap0000);

        SuccessDecoratorNode successDecorator0008 = new SuccessDecoratorNode("successDecorator0008", behaviorTree, unit);
        successDecorator0008.AddChild(sequence0020);

        HasRecklessSkillNode hasRecklessSkill0000 = new HasRecklessSkillNode("hasRecklessSkill0000", behaviorTree, unit);

        HasLOSToAnyHostileNode hasLOSToAnyHostile0000 = new HasLOSToAnyHostileNode("hasLOSToAnyHostile0000", behaviorTree, unit);

        IsBVTrueNode isBVTrue0010 = new IsBVTrueNode("isBVTrue0010", behaviorTree, unit, BehaviorVariableName.Bool_AllowAttack);

        IsAttackAvailableForUnitNode attackAvailable0000 = new IsAttackAvailableForUnitNode("attackAvailable0000", behaviorTree, unit);

        RandomPercentageLessThanBVNode randomPercentageLessThanBV0003 = new RandomPercentageLessThanBVNode("randomPercentageLessThanBV0003", behaviorTree, unit, BehaviorVariableName.Float_UseRecklessSkillPercentageChance);

        HasECMGhostedStateNode hasECMGhostState0000 = new HasECMGhostedStateNode("hasECMGhostState0000", behaviorTree, unit);

        HasMinimumStealthPipsNode hasMinimumStealthPips0000 = new HasMinimumStealthPipsNode("hasMinimumStealthPips0000", behaviorTree, unit);

        ShootAtHighestPriorityEnemyNode shootAtHighestPriorityEnemy0000 = new ShootAtHighestPriorityEnemyNode("shootAtHighestPriorityEnemy0000", behaviorTree, unit);

        SequenceNode sequence0022 = new SequenceNode("sequence0022", behaviorTree, unit);
        sequence0022.AddChild(hasMinimumStealthPips0000);
        sequence0022.AddChild(shootAtHighestPriorityEnemy0000);

        CanDoSignificantDamageWhileGhostedNode canDoSignificantWhileGhostedDamage0000 = new CanDoSignificantDamageWhileGhostedNode("canDoSignificantWhileGhostedDamage0000", behaviorTree, unit);

        ShootAtHighestPriorityEnemyNode shootAtHighestPriorityEnemy0001 = new ShootAtHighestPriorityEnemyNode("shootAtHighestPriorityEnemy0001", behaviorTree, unit);

        SequenceNode sequence0023 = new SequenceNode("sequence0023", behaviorTree, unit);
        sequence0023.AddChild(canDoSignificantWhileGhostedDamage0000);
        sequence0023.AddChild(shootAtHighestPriorityEnemy0001);

        SelectorNode selector0013 = new SelectorNode("selector0013", behaviorTree, unit);
        selector0013.AddChild(sequence0022);
        selector0013.AddChild(sequence0023);

        SequenceNode sequence0021 = new SequenceNode("sequence0021", behaviorTree, unit);
        sequence0021.AddChild(hasECMGhostState0000);
        sequence0021.AddChild(selector0013);

        HasECMGhostedStateNode hasECMGhostState0001 = new HasECMGhostedStateNode("hasECMGhostState0001", behaviorTree, unit);

        InverterNode inverter0020 = new InverterNode("inverter0020", behaviorTree, unit);
        inverter0020.AddChild(hasECMGhostState0001);

        ShootAtHighestPriorityEnemyNode shootAtHighestPriorityEnemy0002 = new ShootAtHighestPriorityEnemyNode("shootAtHighestPriorityEnemy0002", behaviorTree, unit);

        SequenceNode sequence0024 = new SequenceNode("sequence0024", behaviorTree, unit);
        sequence0024.AddChild(inverter0020);
        sequence0024.AddChild(shootAtHighestPriorityEnemy0002);

        SelectorNode selector0012 = new SelectorNode("selector0012", behaviorTree, unit);
        selector0012.AddChild(sequence0021);
        selector0012.AddChild(sequence0024);

        SequenceNode reckless_skill = new SequenceNode("reckless_skill", behaviorTree, unit);
        reckless_skill.AddChild(hasRecklessSkill0000);
        reckless_skill.AddChild(hasLOSToAnyHostile0000);
        reckless_skill.AddChild(isBVTrue0010);
        reckless_skill.AddChild(attackAvailable0000);
        reckless_skill.AddChild(randomPercentageLessThanBV0003);
        reckless_skill.AddChild(selector0012);

        HasBulwarkSkillNode hasBulwarkSkill0000 = new HasBulwarkSkillNode("hasBulwarkSkill0000", behaviorTree, unit);

        IsBVTrueNode isBVTrue0011 = new IsBVTrueNode("isBVTrue0011", behaviorTree, unit, BehaviorVariableName.Bool_AllowAttack);

        IsAttackAvailableForUnitNode attackAvailable0001 = new IsAttackAvailableForUnitNode("attackAvailable0001", behaviorTree, unit);

        IsBVTrueNode isBVTrue0012 = new IsBVTrueNode("isBVTrue0012", behaviorTree, unit, BehaviorVariableName.Bool_UseBulwarkActions);

        CloseToIdealRangeNode closeToIdealRange0000 = new CloseToIdealRangeNode("closeToIdealRange0000", behaviorTree, unit);

        HasDirectLOFToAnyHostileNode hasDirectLOFToAnyHostile0000 = new HasDirectLOFToAnyHostileNode("hasDirectLOFToAnyHostile0000", behaviorTree, unit);

        IsStationaryMoveInBulwarkThresholdNode isStationaryMoveInBulwarkThreshold0000 = new IsStationaryMoveInBulwarkThresholdNode("isStationaryMoveInBulwarkThreshold0000", behaviorTree, unit);

        HasECMGhostedStateNode hasECMGhostState0002 = new HasECMGhostedStateNode("hasECMGhostState0002", behaviorTree, unit);

        HasMinimumStealthPipsNode hasMinimumStealthPips0001 = new HasMinimumStealthPipsNode("hasMinimumStealthPips0001", behaviorTree, unit);

        ExecuteStationaryAttackNode executeStationaryAttack0000 = new ExecuteStationaryAttackNode("executeStationaryAttack0000", behaviorTree, unit);

        SequenceNode sequence0026 = new SequenceNode("sequence0026", behaviorTree, unit);
        sequence0026.AddChild(hasMinimumStealthPips0001);
        sequence0026.AddChild(executeStationaryAttack0000);

        CanDoSignificantDamageWhileGhostedNode canDoSignificantWhileGhostedDamage0001 = new CanDoSignificantDamageWhileGhostedNode("canDoSignificantWhileGhostedDamage0001", behaviorTree, unit);

        ExecuteStationaryAttackNode executeStationaryAttack0001 = new ExecuteStationaryAttackNode("executeStationaryAttack0001", behaviorTree, unit);

        SequenceNode sequence0027 = new SequenceNode("sequence0027", behaviorTree, unit);
        sequence0027.AddChild(canDoSignificantWhileGhostedDamage0001);
        sequence0027.AddChild(executeStationaryAttack0001);

        SelectorNode selector0015 = new SelectorNode("selector0015", behaviorTree, unit);
        selector0015.AddChild(sequence0026);
        selector0015.AddChild(sequence0027);

        SequenceNode sequence0025 = new SequenceNode("sequence0025", behaviorTree, unit);
        sequence0025.AddChild(hasECMGhostState0002);
        sequence0025.AddChild(selector0015);

        HasECMGhostedStateNode hasECMGhostState0003 = new HasECMGhostedStateNode("hasECMGhostState0003", behaviorTree, unit);

        InverterNode inverter0021 = new InverterNode("inverter0021", behaviorTree, unit);
        inverter0021.AddChild(hasECMGhostState0003);

        ExecuteStationaryAttackNode executeStationaryAttack0002 = new ExecuteStationaryAttackNode("executeStationaryAttack0002", behaviorTree, unit);

        SequenceNode sequence0028 = new SequenceNode("sequence0028", behaviorTree, unit);
        sequence0028.AddChild(inverter0021);
        sequence0028.AddChild(executeStationaryAttack0002);

        SelectorNode selector0014 = new SelectorNode("selector0014", behaviorTree, unit);
        selector0014.AddChild(sequence0025);
        selector0014.AddChild(sequence0028);

        SequenceNode bulwark_skill = new SequenceNode("bulwark_skill", behaviorTree, unit);
        bulwark_skill.AddChild(hasBulwarkSkill0000);
        bulwark_skill.AddChild(isBVTrue0011);
        bulwark_skill.AddChild(attackAvailable0001);
        bulwark_skill.AddChild(isBVTrue0012);
        bulwark_skill.AddChild(closeToIdealRange0000);
        bulwark_skill.AddChild(hasDirectLOFToAnyHostile0000);
        bulwark_skill.AddChild(isStationaryMoveInBulwarkThreshold0000);
        bulwark_skill.AddChild(selector0014);

        IsBVTrueNode isBVTrue0013 = new IsBVTrueNode("isBVTrue0013", behaviorTree, unit, BehaviorVariableName.Bool_AllowAttack);

        IsAttackAvailableForUnitNode attackAvailable0002 = new IsAttackAvailableForUnitNode("attackAvailable0002", behaviorTree, unit);

        HighestMoveCandidateIsStationaryNode highestMoveCandidateIsStationary0005 = new HighestMoveCandidateIsStationaryNode("highestMoveCandidateIsStationary0005", behaviorTree, unit);

        HasECMGhostedStateNode hasECMGhostState0004 = new HasECMGhostedStateNode("hasECMGhostState0004", behaviorTree, unit);

        HasMinimumStealthPipsNode hasMinimumStealthPips0002 = new HasMinimumStealthPipsNode("hasMinimumStealthPips0002", behaviorTree, unit);

        ExecuteStationaryAttackNode executeStationaryAttack0003 = new ExecuteStationaryAttackNode("executeStationaryAttack0003", behaviorTree, unit);

        SequenceNode sequence0030 = new SequenceNode("sequence0030", behaviorTree, unit);
        sequence0030.AddChild(hasMinimumStealthPips0002);
        sequence0030.AddChild(executeStationaryAttack0003);

        CanDoSignificantDamageWhileGhostedNode canDoSignificantWhileGhostedDamage0002 = new CanDoSignificantDamageWhileGhostedNode("canDoSignificantWhileGhostedDamage0002", behaviorTree, unit);

        ExecuteStationaryAttackNode executeStationaryAttack0004 = new ExecuteStationaryAttackNode("executeStationaryAttack0004", behaviorTree, unit);

        SequenceNode sequence0031 = new SequenceNode("sequence0031", behaviorTree, unit);
        sequence0031.AddChild(canDoSignificantWhileGhostedDamage0002);
        sequence0031.AddChild(executeStationaryAttack0004);

        SelectorNode selector0017 = new SelectorNode("selector0017", behaviorTree, unit);
        selector0017.AddChild(sequence0030);
        selector0017.AddChild(sequence0031);

        SequenceNode sequence0029 = new SequenceNode("sequence0029", behaviorTree, unit);
        sequence0029.AddChild(hasECMGhostState0004);
        sequence0029.AddChild(selector0017);

        HasECMGhostedStateNode hasECMGhostState0005 = new HasECMGhostedStateNode("hasECMGhostState0005", behaviorTree, unit);

        InverterNode inverter0022 = new InverterNode("inverter0022", behaviorTree, unit);
        inverter0022.AddChild(hasECMGhostState0005);

        ExecuteStationaryAttackNode executeStationaryAttack0005 = new ExecuteStationaryAttackNode("executeStationaryAttack0005", behaviorTree, unit);

        SequenceNode sequence0032 = new SequenceNode("sequence0032", behaviorTree, unit);
        sequence0032.AddChild(inverter0022);
        sequence0032.AddChild(executeStationaryAttack0005);

        SelectorNode selector0016 = new SelectorNode("selector0016", behaviorTree, unit);
        selector0016.AddChild(sequence0029);
        selector0016.AddChild(sequence0032);

        SequenceNode stationary__e_g__dfa__melee__attack = new SequenceNode("stationary__e_g__dfa__melee__attack", behaviorTree, unit);
        stationary__e_g__dfa__melee__attack.AddChild(isBVTrue0013);
        stationary__e_g__dfa__melee__attack.AddChild(attackAvailable0002);
        stationary__e_g__dfa__melee__attack.AddChild(highestMoveCandidateIsStationary0005);
        stationary__e_g__dfa__melee__attack.AddChild(selector0016);

        HasMoveCandidatesNode hasMoveCandidates0001 = new HasMoveCandidatesNode("hasMoveCandidates0001", behaviorTree, unit);

        InverterNode inverter0023 = new InverterNode("inverter0023", behaviorTree, unit);
        inverter0023.AddChild(hasMoveCandidates0001);

        BraceNode brace0001 = new BraceNode("brace0001", behaviorTree, unit);

        SequenceNode brace_if_no_moves = new SequenceNode("brace_if_no_moves", behaviorTree, unit);
        brace_if_no_moves.AddChild(inverter0023);
        brace_if_no_moves.AddChild(brace0001);

        MoveTowardsHighestPriorityMoveCandidateNode moveTowardsHighestPriorityMoveCandidate0005 = new MoveTowardsHighestPriorityMoveCandidateNode("moveTowardsHighestPriorityMoveCandidate0005", behaviorTree, unit, true);

        SelectorNode selector0011 = new SelectorNode("selector0011", behaviorTree, unit);
        selector0011.AddChild(reckless_skill);
        selector0011.AddChild(bulwark_skill);
        selector0011.AddChild(stationary__e_g__dfa__melee__attack);
        selector0011.AddChild(brace_if_no_moves);
        selector0011.AddChild(moveTowardsHighestPriorityMoveCandidate0005);

        SequenceNode sequence0014 = new SequenceNode("sequence0014", behaviorTree, unit);
        sequence0014.AddChild(generateForwardMoveCandidates0000);
        sequence0014.AddChild(generateReverseMoveCandidates0000);
        sequence0014.AddChild(successDecorator0004);
        sequence0014.AddChild(successDecorator0005);
        sequence0014.AddChild(generateStationaryMoveCandidates0000);
        sequence0014.AddChild(successDecorator0006);
        sequence0014.AddChild(successDecorator0007);
        sequence0014.AddChild(if_priority_targeting__remove_non_LOF_move_candidates);
        sequence0014.AddChild(filterMovesForHeat0000);
        sequence0014.AddChild(successDecorator0008);
        sequence0014.AddChild(selector0011);

        SelectorNode selector0006 = new SelectorNode("selector0006", behaviorTree, unit);
        selector0006.AddChild(move_out_of_nook);
        selector0006.AddChild(move_towards_combat);
        selector0006.AddChild(sequence0014);

        SequenceNode sequence0005 = new SequenceNode("sequence0005", behaviorTree, unit);
        sequence0005.AddChild(sortEnemiesByThreat0000);
        sequence0005.AddChild(priorityMove);
        sequence0005.AddChild(useNormalToHitThreshold0000);
        sequence0005.AddChild(clearMoveCandidates0000);
        sequence0005.AddChild(successDecorator0002);
        sequence0005.AddChild(selector0006);

        SuccessDecoratorNode aggressive_Movement = new SuccessDecoratorNode("aggressive_Movement", behaviorTree, unit);
        aggressive_Movement.AddChild(sequence0005);

        SequenceNode offensive_Move = new SequenceNode("offensive_Move", behaviorTree, unit);
        offensive_Move.AddChild(inverter0003);
        offensive_Move.AddChild(selector0002);
        offensive_Move.AddChild(selector0003);
        offensive_Move.AddChild(selector0004);
        offensive_Move.AddChild(aggressive_Movement);

        DebugLogNode debugLog0000 = new DebugLogNode("debugLog0000", behaviorTree, unit, "Defensive Move");

        IsBVTrueNode isBVTrue0014 = new IsBVTrueNode("isBVTrue0014", behaviorTree, unit, BehaviorVariableName.Bool_AlwaysOffensiveMood);

        InverterNode inverter0024 = new InverterNode("inverter0024", behaviorTree, unit);
        inverter0024.AddChild(isBVTrue0014);

        SetMoodNode setMood0003 = new SetMoodNode("setMood0003", behaviorTree, unit, AIMood.Defensive);

        IsOverheatedNode isOverheated0002 = new IsOverheatedNode("isOverheated0002", behaviorTree, unit);

        IsOutsideCoolDownRangeNode isOutsideCoolDownRange0000 = new IsOutsideCoolDownRangeNode("isOutsideCoolDownRange0000", behaviorTree, unit);

        HasLOSToAnyHostileNode hasLOSToAnyHostile0001 = new HasLOSToAnyHostileNode("hasLOSToAnyHostile0001", behaviorTree, unit);

        InverterNode inverter0025 = new InverterNode("inverter0025", behaviorTree, unit);
        inverter0025.AddChild(hasLOSToAnyHostile0001);

        AnyHostileBehindMeNode anyHostileBehindMe0001 = new AnyHostileBehindMeNode("anyHostileBehindMe0001", behaviorTree, unit);

        InverterNode inverter0026 = new InverterNode("inverter0026", behaviorTree, unit);
        inverter0026.AddChild(anyHostileBehindMe0001);

        BraceNode brace0002 = new BraceNode("brace0002", behaviorTree, unit);

        SequenceNode brace_if_at_acceptable_range_to_cool_down = new SequenceNode("brace_if_at_acceptable_range_to_cool_down", behaviorTree, unit);
        brace_if_at_acceptable_range_to_cool_down.AddChild(isOverheated0002);
        brace_if_at_acceptable_range_to_cool_down.AddChild(isOutsideCoolDownRange0000);
        brace_if_at_acceptable_range_to_cool_down.AddChild(inverter0025);
        brace_if_at_acceptable_range_to_cool_down.AddChild(inverter0026);
        brace_if_at_acceptable_range_to_cool_down.AddChild(brace0002);

        ClearMoveCandidatesNode clearMoveCandidates0005 = new ClearMoveCandidatesNode("clearMoveCandidates0005", behaviorTree, unit);

        GenerateMoveCandidatesNode generateMoveCandidates0000 = new GenerateMoveCandidatesNode("generateMoveCandidates0000", behaviorTree, unit);

        SortMoveCandidatesByInfMapNode sortMoveCandidatesByInfMap0001 = new SortMoveCandidatesByInfMapNode("sortMoveCandidatesByInfMap0001", behaviorTree, unit);

        MoveTowardsHighestPriorityMoveCandidateNode moveTowardsHighestPriorityMoveCandidate0006 = new MoveTowardsHighestPriorityMoveCandidateNode("moveTowardsHighestPriorityMoveCandidate0006", behaviorTree, unit, true);

        SequenceNode move_to_defensive_position = new SequenceNode("move_to_defensive_position", behaviorTree, unit);
        move_to_defensive_position.AddChild(clearMoveCandidates0005);
        move_to_defensive_position.AddChild(generateMoveCandidates0000);
        move_to_defensive_position.AddChild(sortMoveCandidatesByInfMap0001);
        move_to_defensive_position.AddChild(moveTowardsHighestPriorityMoveCandidate0006);

        SelectorNode selector0018 = new SelectorNode("selector0018", behaviorTree, unit);
        selector0018.AddChild(brace_if_at_acceptable_range_to_cool_down);
        selector0018.AddChild(move_to_defensive_position);

        SequenceNode defensive_Move = new SequenceNode("defensive_Move", behaviorTree, unit);
        defensive_Move.AddChild(debugLog0000);
        defensive_Move.AddChild(inverter0024);
        defensive_Move.AddChild(setMood0003);
        defensive_Move.AddChild(selector0018);

        SelectorNode offense___defense = new SelectorNode("offense___defense", behaviorTree, unit);
        offense___defense.AddChild(if_overheated__maybe_brace);
        offense___defense.AddChild(offensive_Move);
        offense___defense.AddChild(defensive_Move);

        SequenceNode canMove = new SequenceNode("canMove", behaviorTree, unit);
        canMove.AddChild(movementAvailable0005);
        canMove.AddChild(blockUntilPathfindingReady0004);
        canMove.AddChild(reset_active_probe);
        canMove.AddChild(maybe_sensor_lock);
        canMove.AddChild(offense___defense);

        HasRecordedSensorLockTargetNode hasRecordedSensorLockTarget0005 = new HasRecordedSensorLockTargetNode("hasRecordedSensorLockTarget0005", behaviorTree, unit);

        InverterNode inverter0027 = new InverterNode("inverter0027", behaviorTree, unit);
        inverter0027.AddChild(hasRecordedSensorLockTarget0005);

        HasSensorLockAbilityNode hasSensorLockAbility0001 = new HasSensorLockAbilityNode("hasSensorLockAbility0001", behaviorTree, unit);

        HasSensorLockTargetNode hasSensorLockTarget0001 = new HasSensorLockTargetNode("hasSensorLockTarget0001", behaviorTree, unit);

        SortEnemiesBySensorLockQualityNode sortEnemiesBySensorLockQuality0001 = new SortEnemiesBySensorLockQualityNode("sortEnemiesBySensorLockQuality0001", behaviorTree, unit);

        RecordHighestPriorityEnemyAsSensorLockTargetNode recordHighestPriorityEnemyAsSensorLockTarget0001 = new RecordHighestPriorityEnemyAsSensorLockTargetNode("recordHighestPriorityEnemyAsSensorLockTarget0001", behaviorTree, unit);

        SetMoodNode setMood0004 = new SetMoodNode("setMood0004", behaviorTree, unit, AIMood.Aggressive);

        SensorLockRecordedSensorLockTargetNode sensorLockRecordedSensorLockTarget0001 = new SensorLockRecordedSensorLockTargetNode("sensorLockRecordedSensorLockTarget0001", behaviorTree, unit);

        ClearSensorLockNode clearSensorLock0003 = new ClearSensorLockNode("clearSensorLock0003", behaviorTree, unit);

        SequenceNode sensor_Lock_Second_Chance = new SequenceNode("sensor_Lock_Second_Chance", behaviorTree, unit);
        sensor_Lock_Second_Chance.AddChild(inverter0027);
        sensor_Lock_Second_Chance.AddChild(hasSensorLockAbility0001);
        sensor_Lock_Second_Chance.AddChild(hasSensorLockTarget0001);
        sensor_Lock_Second_Chance.AddChild(sortEnemiesBySensorLockQuality0001);
        sensor_Lock_Second_Chance.AddChild(recordHighestPriorityEnemyAsSensorLockTarget0001);
        sensor_Lock_Second_Chance.AddChild(setMood0004);
        sensor_Lock_Second_Chance.AddChild(sensorLockRecordedSensorLockTarget0001);
        sensor_Lock_Second_Chance.AddChild(clearSensorLock0003);

        HasSensorLockAbilityNode hasSensorLockAbility0002 = new HasSensorLockAbilityNode("hasSensorLockAbility0002", behaviorTree, unit);

        HasRecordedSensorLockTargetNode hasRecordedSensorLockTarget0006 = new HasRecordedSensorLockTargetNode("hasRecordedSensorLockTarget0006", behaviorTree, unit);

        SetMoodNode setMood0005 = new SetMoodNode("setMood0005", behaviorTree, unit, AIMood.Aggressive);

        SensorLockRecordedSensorLockTargetNode sensorLockRecordedSensorLockTarget0002 = new SensorLockRecordedSensorLockTargetNode("sensorLockRecordedSensorLockTarget0002", behaviorTree, unit);

        ClearSensorLockNode clearSensorLock0004 = new ClearSensorLockNode("clearSensorLock0004", behaviorTree, unit);

        SequenceNode choseToSensorLockDuringMove = new SequenceNode("choseToSensorLockDuringMove", behaviorTree, unit);
        choseToSensorLockDuringMove.AddChild(hasSensorLockAbility0002);
        choseToSensorLockDuringMove.AddChild(hasRecordedSensorLockTarget0006);
        choseToSensorLockDuringMove.AddChild(setMood0005);
        choseToSensorLockDuringMove.AddChild(sensorLockRecordedSensorLockTarget0002);
        choseToSensorLockDuringMove.AddChild(clearSensorLock0004);

        HasActiveProbeAbilityNode hasActiveProbeAbility0001 = new HasActiveProbeAbilityNode("hasActiveProbeAbility0001", behaviorTree, unit);

        DoesActiveProbeHaveTargetsNode doesActiveProbeHaveTargets0000 = new DoesActiveProbeHaveTargetsNode("doesActiveProbeHaveTargets0000", behaviorTree, unit);

        FireActiveProbeNode fireActiveProbe0000 = new FireActiveProbeNode("fireActiveProbe0000", behaviorTree, unit);

        ClearActiveProbeHasTargetsNode clearActiveProbeHasTargets0002 = new ClearActiveProbeHasTargetsNode("clearActiveProbeHasTargets0002", behaviorTree, unit);

        SequenceNode fireActiveProbeIfWeHaveTargets = new SequenceNode("fireActiveProbeIfWeHaveTargets", behaviorTree, unit);
        fireActiveProbeIfWeHaveTargets.AddChild(hasActiveProbeAbility0001);
        fireActiveProbeIfWeHaveTargets.AddChild(doesActiveProbeHaveTargets0000);
        fireActiveProbeIfWeHaveTargets.AddChild(fireActiveProbe0000);
        fireActiveProbeIfWeHaveTargets.AddChild(clearActiveProbeHasTargets0002);

        HasActiveProbeAbilityNode hasActiveProbeAbility0002 = new HasActiveProbeAbilityNode("hasActiveProbeAbility0002", behaviorTree, unit);

        DoesActiveProbeHaveTargetsNode doesActiveProbeHaveTargets0001 = new DoesActiveProbeHaveTargetsNode("doesActiveProbeHaveTargets0001", behaviorTree, unit);

        InverterNode inverter0028 = new InverterNode("inverter0028", behaviorTree, unit);
        inverter0028.AddChild(doesActiveProbeHaveTargets0001);

        CacheHasActiveProbeTargetsNode cacheHasActiveProbeTargets0000 = new CacheHasActiveProbeTargetsNode("cacheHasActiveProbeTargets0000", behaviorTree, unit);

        DoesActiveProbeHaveTargetsNode doesActiveProbeHaveTargets0002 = new DoesActiveProbeHaveTargetsNode("doesActiveProbeHaveTargets0002", behaviorTree, unit);

        FireActiveProbeNode fireActiveProbe0001 = new FireActiveProbeNode("fireActiveProbe0001", behaviorTree, unit);

        ClearActiveProbeHasTargetsNode clearActiveProbeHasTargets0003 = new ClearActiveProbeHasTargetsNode("clearActiveProbeHasTargets0003", behaviorTree, unit);

        SequenceNode chooseToActiveProbe = new SequenceNode("chooseToActiveProbe", behaviorTree, unit);
        chooseToActiveProbe.AddChild(hasActiveProbeAbility0002);
        chooseToActiveProbe.AddChild(inverter0028);
        chooseToActiveProbe.AddChild(cacheHasActiveProbeTargets0000);
        chooseToActiveProbe.AddChild(doesActiveProbeHaveTargets0002);
        chooseToActiveProbe.AddChild(fireActiveProbe0001);
        chooseToActiveProbe.AddChild(clearActiveProbeHasTargets0003);

        IsBVTrueNode isBVTrue0015 = new IsBVTrueNode("isBVTrue0015", behaviorTree, unit, BehaviorVariableName.Bool_AllowAttack);

        IsAttackAvailableForUnitNode attackAvailable0003 = new IsAttackAvailableForUnitNode("attackAvailable0003", behaviorTree, unit);

        DebugLogToContextNode debugLogToContext0000 = new DebugLogToContextNode("debugLogToContext0000", behaviorTree, unit, "checking unsteady", AIDebugContext.Shoot);

        IsUnsteadyNode isUnsteady0001 = new IsUnsteadyNode("isUnsteady0001", behaviorTree, unit);

        DebugLogToContextNode debugLogToContext0001 = new DebugLogToContextNode("debugLogToContext0001", behaviorTree, unit, "is unsteady", AIDebugContext.Shoot);

        ExpectedDamageToMeLessThanNode expectedDamageToMeLessThan0000 = new ExpectedDamageToMeLessThanNode("expectedDamageToMeLessThan0000", behaviorTree, unit, BehaviorVariableName.Float_UnsteadyOverkillThreshold);

        RandomPercentageLessThanBVNode randomPercentageLessThanBV0004 = new RandomPercentageLessThanBVNode("randomPercentageLessThanBV0004", behaviorTree, unit, BehaviorVariableName.Float_UnsteadyCausesBracePercentage);

        DebugLogToContextNode debugLogToContext0002 = new DebugLogToContextNode("debugLogToContext0002", behaviorTree, unit, "die roll less than Float_UnsteadyCausesBracePercentage", AIDebugContext.Shoot);

        AnyHostileBehindMeNode anyHostileBehindMe0002 = new AnyHostileBehindMeNode("anyHostileBehindMe0002", behaviorTree, unit);

        InverterNode inverter0029 = new InverterNode("inverter0029", behaviorTree, unit);
        inverter0029.AddChild(anyHostileBehindMe0002);

        DebugLogToContextNode debugLogToContext0003 = new DebugLogToContextNode("debugLogToContext0003", behaviorTree, unit, "no hostiles behind me", AIDebugContext.Shoot);

        BraceNode brace0003 = new BraceNode("brace0003", behaviorTree, unit);

        DebugLogToContextNode debugLogToContext0004 = new DebugLogToContextNode("debugLogToContext0004", behaviorTree, unit, "braced", AIDebugContext.Shoot);

        SequenceNode react_to_being_unsteady = new SequenceNode("react_to_being_unsteady", behaviorTree, unit);
        react_to_being_unsteady.AddChild(debugLogToContext0000);
        react_to_being_unsteady.AddChild(isUnsteady0001);
        react_to_being_unsteady.AddChild(debugLogToContext0001);
        react_to_being_unsteady.AddChild(expectedDamageToMeLessThan0000);
        react_to_being_unsteady.AddChild(randomPercentageLessThanBV0004);
        react_to_being_unsteady.AddChild(debugLogToContext0002);
        react_to_being_unsteady.AddChild(inverter0029);
        react_to_being_unsteady.AddChild(debugLogToContext0003);
        react_to_being_unsteady.AddChild(brace0003);
        react_to_being_unsteady.AddChild(debugLogToContext0004);

        DebugLogToContextNode debugLogToContext0005 = new DebugLogToContextNode("debugLogToContext0005", behaviorTree, unit, "sorting enemies by threat", AIDebugContext.Shoot);

        SortEnemiesByThreatNode sortEnemiesByThreat0001 = new SortEnemiesByThreatNode("sortEnemiesByThreat0001", behaviorTree, unit);

        DebugLogEnemiesByThreatNode debugLogEnemiesByThreat0000 = new DebugLogEnemiesByThreatNode("debugLogEnemiesByThreat0000", behaviorTree, unit);

        UseNormalToHitThreshold useNormalToHitThreshold0001 = new UseNormalToHitThreshold("useNormalToHitThreshold0001", behaviorTree, unit);

        DebugLogToContextNode debugLogToContext0006 = new DebugLogToContextNode("debugLogToContext0006", behaviorTree, unit, "checking PriorityAttack", AIDebugContext.Shoot);

        WasTargetedRecentlyNode wasTargetedRecently0003 = new WasTargetedRecentlyNode("wasTargetedRecently0003", behaviorTree, unit);

        InverterNode inverter0030 = new InverterNode("inverter0030", behaviorTree, unit);
        inverter0030.AddChild(wasTargetedRecently0003);

        DebugLogToContextNode debugLogToContext0007 = new DebugLogToContextNode("debugLogToContext0007", behaviorTree, unit, "was not targeted recently", AIDebugContext.Shoot);

        RandomPercentageLessThanBVNode randomPercentageLessThanBV0005 = new RandomPercentageLessThanBVNode("randomPercentageLessThanBV0005", behaviorTree, unit, BehaviorVariableName.Float_PriorityAttackPercentage);

        DebugLogToContextNode debugLogToContext0008 = new DebugLogToContextNode("debugLogToContext0008", behaviorTree, unit, "random number was less than Float_PriorityAttackPercentage", AIDebugContext.Shoot);

        SortEnemiesByPriorityListNode sortEnemiesByPriorityList0001 = new SortEnemiesByPriorityListNode("sortEnemiesByPriorityList0001", behaviorTree, unit);

        DebugLogToContextNode debugLogToContext0009 = new DebugLogToContextNode("debugLogToContext0009", behaviorTree, unit, "sorted enemies by priority list", AIDebugContext.Shoot);

        DebugLogEnemiesByThreatNode debugLogEnemiesByThreat0001 = new DebugLogEnemiesByThreatNode("debugLogEnemiesByThreat0001", behaviorTree, unit);

        SequenceNode sequence0034 = new SequenceNode("sequence0034", behaviorTree, unit);
        sequence0034.AddChild(inverter0030);
        sequence0034.AddChild(debugLogToContext0007);
        sequence0034.AddChild(randomPercentageLessThanBV0005);
        sequence0034.AddChild(debugLogToContext0008);
        sequence0034.AddChild(sortEnemiesByPriorityList0001);
        sequence0034.AddChild(debugLogToContext0009);
        sequence0034.AddChild(debugLogEnemiesByThreat0001);

        MaybeFilterOutPriorityTargetsNode maybeFilterOutPriorityTargets0001 = new MaybeFilterOutPriorityTargetsNode("maybeFilterOutPriorityTargets0001", behaviorTree, unit);

        FilterKeepingRecentAttackersNode filterKeepingRecentAttackers0001 = new FilterKeepingRecentAttackersNode("filterKeepingRecentAttackers0001", behaviorTree, unit);

        SelectorNode priorityAttack = new SelectorNode("priorityAttack", behaviorTree, unit);
        priorityAttack.AddChild(sequence0034);
        priorityAttack.AddChild(maybeFilterOutPriorityTargets0001);
        priorityAttack.AddChild(filterKeepingRecentAttackers0001);

        DebugLogToContextNode debugLogToContext0010 = new DebugLogToContextNode("debugLogToContext0010", behaviorTree, unit, "shooting at highest priority enemy", AIDebugContext.Shoot);

        HasECMGhostedStateNode hasECMGhostState0006 = new HasECMGhostedStateNode("hasECMGhostState0006", behaviorTree, unit);

        HasMinimumStealthPipsNode hasMinimumStealthPips0003 = new HasMinimumStealthPipsNode("hasMinimumStealthPips0003", behaviorTree, unit);

        ShootAtHighestPriorityEnemyNode shootAtHighestPriorityEnemy0003 = new ShootAtHighestPriorityEnemyNode("shootAtHighestPriorityEnemy0003", behaviorTree, unit);

        SequenceNode sequence0036 = new SequenceNode("sequence0036", behaviorTree, unit);
        sequence0036.AddChild(hasMinimumStealthPips0003);
        sequence0036.AddChild(shootAtHighestPriorityEnemy0003);

        CanDoSignificantDamageWhileGhostedNode canDoSignificantWhileGhostedDamage0003 = new CanDoSignificantDamageWhileGhostedNode("canDoSignificantWhileGhostedDamage0003", behaviorTree, unit);

        ShootAtHighestPriorityEnemyNode shootAtHighestPriorityEnemy0004 = new ShootAtHighestPriorityEnemyNode("shootAtHighestPriorityEnemy0004", behaviorTree, unit);

        SequenceNode sequence0037 = new SequenceNode("sequence0037", behaviorTree, unit);
        sequence0037.AddChild(canDoSignificantWhileGhostedDamage0003);
        sequence0037.AddChild(shootAtHighestPriorityEnemy0004);

        SelectorNode selector0021 = new SelectorNode("selector0021", behaviorTree, unit);
        selector0021.AddChild(sequence0036);
        selector0021.AddChild(sequence0037);

        SequenceNode sequence0035 = new SequenceNode("sequence0035", behaviorTree, unit);
        sequence0035.AddChild(hasECMGhostState0006);
        sequence0035.AddChild(selector0021);

        HasECMGhostedStateNode hasECMGhostState0007 = new HasECMGhostedStateNode("hasECMGhostState0007", behaviorTree, unit);

        InverterNode inverter0031 = new InverterNode("inverter0031", behaviorTree, unit);
        inverter0031.AddChild(hasECMGhostState0007);

        ShootAtHighestPriorityEnemyNode shootAtHighestPriorityEnemy0005 = new ShootAtHighestPriorityEnemyNode("shootAtHighestPriorityEnemy0005", behaviorTree, unit);

        SequenceNode sequence0038 = new SequenceNode("sequence0038", behaviorTree, unit);
        sequence0038.AddChild(inverter0031);
        sequence0038.AddChild(shootAtHighestPriorityEnemy0005);

        SelectorNode selector0020 = new SelectorNode("selector0020", behaviorTree, unit);
        selector0020.AddChild(sequence0035);
        selector0020.AddChild(sequence0038);

        DebugLogToContextNode debugLogToContext0011 = new DebugLogToContextNode("debugLogToContext0011", behaviorTree, unit, "successfully issued shoot order. Complete.", AIDebugContext.Shoot);

        SequenceNode sequence0033 = new SequenceNode("sequence0033", behaviorTree, unit);
        sequence0033.AddChild(debugLogToContext0005);
        sequence0033.AddChild(sortEnemiesByThreat0001);
        sequence0033.AddChild(debugLogEnemiesByThreat0000);
        sequence0033.AddChild(useNormalToHitThreshold0001);
        sequence0033.AddChild(debugLogToContext0006);
        sequence0033.AddChild(priorityAttack);
        sequence0033.AddChild(debugLogToContext0010);
        sequence0033.AddChild(selector0020);
        sequence0033.AddChild(debugLogToContext0011);

        SelectorNode selector0019 = new SelectorNode("selector0019", behaviorTree, unit);
        selector0019.AddChild(react_to_being_unsteady);
        selector0019.AddChild(sequence0033);

        WithLogContextNode withLogContext0000 = new WithLogContextNode("withLogContext0000", behaviorTree, unit, AIDebugContext.Shoot);
        withLogContext0000.AddChild(selector0019);

        SequenceNode canAttack = new SequenceNode("canAttack", behaviorTree, unit);
        canAttack.AddChild(isBVTrue0015);
        canAttack.AddChild(attackAvailable0003);
        canAttack.AddChild(withLogContext0000);

        SelectorNode selector0001 = new SelectorNode("selector0001", behaviorTree, unit);
        selector0001.AddChild(canMove);
        selector0001.AddChild(sensor_Lock_Second_Chance);
        selector0001.AddChild(choseToSensorLockDuringMove);
        selector0001.AddChild(fireActiveProbeIfWeHaveTargets);
        selector0001.AddChild(chooseToActiveProbe);
        selector0001.AddChild(canAttack);

        SequenceNode free_engage = new SequenceNode("free_engage", behaviorTree, unit);
        free_engage.AddChild(lanceDetectsEnemies0000);
        free_engage.AddChild(findDetectedEnemies0000);
        free_engage.AddChild(isAlerted0000);
        free_engage.AddChild(selector0001);

        IsMovementAvailableForUnitNode movementAvailable0006 = new IsMovementAvailableForUnitNode("movementAvailable0006", behaviorTree, unit);

        BlockUntilPathfindingReadyNode blockUntilPathfindingReady0005 = new BlockUntilPathfindingReadyNode("blockUntilPathfindingReady0005", behaviorTree, unit);

        LanceHasPostAttackDestinationNode hasPostAttackLanceMove0000 = new LanceHasPostAttackDestinationNode("hasPostAttackLanceMove0000", behaviorTree, unit);

        MoveLanceToPostAttackDestinationNode moveLanceToPostAttackDestination0000 = new MoveLanceToPostAttackDestinationNode("moveLanceToPostAttackDestination0000", behaviorTree, unit);

        SequenceNode post_attack_lance_move = new SequenceNode("post_attack_lance_move", behaviorTree, unit);
        post_attack_lance_move.AddChild(hasPostAttackLanceMove0000);
        post_attack_lance_move.AddChild(moveLanceToPostAttackDestination0000);

        UnitHasPostAttackDestinationNode hasPostAttackUnitMove0000 = new UnitHasPostAttackDestinationNode("hasPostAttackUnitMove0000", behaviorTree, unit);

        MoveUnitToPostAttackDestinationNode moveUnitToPostAttackDestination0000 = new MoveUnitToPostAttackDestinationNode("moveUnitToPostAttackDestination0000", behaviorTree, unit);

        SequenceNode post_attack_unit_move = new SequenceNode("post_attack_unit_move", behaviorTree, unit);
        post_attack_unit_move.AddChild(hasPostAttackUnitMove0000);
        post_attack_unit_move.AddChild(moveUnitToPostAttackDestination0000);

        SelectorNode selector0022 = new SelectorNode("selector0022", behaviorTree, unit);
        selector0022.AddChild(post_attack_lance_move);
        selector0022.AddChild(post_attack_unit_move);

        SequenceNode post_attack_move = new SequenceNode("post_attack_move", behaviorTree, unit);
        post_attack_move.AddChild(movementAvailable0006);
        post_attack_move.AddChild(blockUntilPathfindingReady0005);
        post_attack_move.AddChild(selector0022);

        IsAlertedNode isAlerted0001 = new IsAlertedNode("isAlerted0001", behaviorTree, unit);

        IsMovementAvailableForUnitNode movementAvailable0007 = new IsMovementAvailableForUnitNode("movementAvailable0007", behaviorTree, unit);

        BlockUntilPathfindingReadyNode blockUntilPathfindingReady0006 = new BlockUntilPathfindingReadyNode("blockUntilPathfindingReady0006", behaviorTree, unit);

        FindPreviouslySeenEnemiesNode findPreviouslySeenEnemies0000 = new FindPreviouslySeenEnemiesNode("findPreviouslySeenEnemies0000", behaviorTree, unit);

        SortEnemiesByDistanceToLastSeenLocationNode sortEnemiesByDistanceToLastSeenLocation0000 = new SortEnemiesByDistanceToLastSeenLocationNode("sortEnemiesByDistanceToLastSeenLocation0000", behaviorTree, unit);

        WasTargetedRecentlyNode wasTargetedRecently0004 = new WasTargetedRecentlyNode("wasTargetedRecently0004", behaviorTree, unit);

        InverterNode inverter0032 = new InverterNode("inverter0032", behaviorTree, unit);
        inverter0032.AddChild(wasTargetedRecently0004);

        SortEnemiesByPriorityListNode sortEnemiesByPriorityList0002 = new SortEnemiesByPriorityListNode("sortEnemiesByPriorityList0002", behaviorTree, unit);

        SequenceNode sequence0039 = new SequenceNode("sequence0039", behaviorTree, unit);
        sequence0039.AddChild(inverter0032);
        sequence0039.AddChild(sortEnemiesByPriorityList0002);

        FilterKeepingRecentAttackersNode filterKeepingRecentAttackers0002 = new FilterKeepingRecentAttackersNode("filterKeepingRecentAttackers0002", behaviorTree, unit);

        SucceedNode succeed0001 = new SucceedNode("succeed0001", behaviorTree, unit);

        SelectorNode priorityHunt = new SelectorNode("priorityHunt", behaviorTree, unit);
        priorityHunt.AddChild(sequence0039);
        priorityHunt.AddChild(filterKeepingRecentAttackers0002);
        priorityHunt.AddChild(succeed0001);

        MoveTowardsHighestPriorityEnemyLastSeenLocationNode moveTowardsHighestPriorityEnemyLastSeenLocation0000 = new MoveTowardsHighestPriorityEnemyLastSeenLocationNode("moveTowardsHighestPriorityEnemyLastSeenLocation0000", behaviorTree, unit);

        SequenceNode hunt_previously_seen = new SequenceNode("hunt_previously_seen", behaviorTree, unit);
        hunt_previously_seen.AddChild(isAlerted0001);
        hunt_previously_seen.AddChild(movementAvailable0007);
        hunt_previously_seen.AddChild(blockUntilPathfindingReady0006);
        hunt_previously_seen.AddChild(findPreviouslySeenEnemies0000);
        hunt_previously_seen.AddChild(sortEnemiesByDistanceToLastSeenLocation0000);
        hunt_previously_seen.AddChild(priorityHunt);
        hunt_previously_seen.AddChild(moveTowardsHighestPriorityEnemyLastSeenLocation0000);

        IsMovementAvailableForUnitNode movementAvailable0008 = new IsMovementAvailableForUnitNode("movementAvailable0008", behaviorTree, unit);

        UnitHasRouteNode unitHasRoute0000 = new UnitHasRouteNode("unitHasRoute0000", behaviorTree, unit);

        LanceHasCompletedRouteNode lanceHasCompletedRoute0000 = new LanceHasCompletedRouteNode("lanceHasCompletedRoute0000", behaviorTree, unit);

        InverterNode inverter0033 = new InverterNode("inverter0033", behaviorTree, unit);
        inverter0033.AddChild(lanceHasCompletedRoute0000);

        LanceHasStartedRouteNode lanceHasStartedRoute0000 = new LanceHasStartedRouteNode("lanceHasStartedRoute0000", behaviorTree, unit);

        LanceStartRouteNode lanceStartRoute0000 = new LanceStartRouteNode("lanceStartRoute0000", behaviorTree, unit);

        SelectorNode selector0023 = new SelectorNode("selector0023", behaviorTree, unit);
        selector0023.AddChild(lanceHasStartedRoute0000);
        selector0023.AddChild(lanceStartRoute0000);

        BlockUntilPathfindingReadyNode blockUntilPathfindingReady0007 = new BlockUntilPathfindingReadyNode("blockUntilPathfindingReady0007", behaviorTree, unit);

        MoveAlongRouteNode moveAlongRoute0000 = new MoveAlongRouteNode("moveAlongRoute0000", behaviorTree, unit);

        SequenceNode patrol = new SequenceNode("patrol", behaviorTree, unit);
        patrol.AddChild(movementAvailable0008);
        patrol.AddChild(unitHasRoute0000);
        patrol.AddChild(inverter0033);
        patrol.AddChild(selector0023);
        patrol.AddChild(blockUntilPathfindingReady0007);
        patrol.AddChild(moveAlongRoute0000);

        BraceNode brace0004 = new BraceNode("brace0004", behaviorTree, unit);

        SelectorNode core_AI_root = new SelectorNode("core_AI_root", behaviorTree, unit);
        core_AI_root.AddChild(startup_cleanup);
        core_AI_root.AddChild(if_shutdown__restart);
        core_AI_root.AddChild(if_prone__stand_up);
        core_AI_root.AddChild(if_inspire_available__maybe_inspire);
        core_AI_root.AddChild(get_inside_encounter_bounds);
        core_AI_root.AddChild(comply_with_stay_inside_region_order);
        core_AI_root.AddChild(pre_attack_move);
        core_AI_root.AddChild(free_engage);
        core_AI_root.AddChild(post_attack_move);
        core_AI_root.AddChild(hunt_previously_seen);
        core_AI_root.AddChild(patrol);
        core_AI_root.AddChild(brace0004);

        return core_AI_root;
    }
}
